class Solution {
    
    // TC: O(N^2)
    // SC: O(1)
    
    public String longestPalindrome(String s) {
        int start = 0; 
        int end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            int case1 = ExpandFromCenter(s, i, i); // odd
            int case2 = ExpandFromCenter(s, i, i + 1); // even
            int maxLen = Math.max(case1, case2);
            if (maxLen > end - start) {
                start = i - (maxLen - 1) / 2;
                end = i + maxLen / 2; 
            }
        }
        return s.substring(start, end + 1);
    }

    private int ExpandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}